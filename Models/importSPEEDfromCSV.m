
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [LONGITUDE1,LATITUDE1,ELEVATION1,DISTANCE1,COSTPERKM1,ELEVCOST1,TURNCOST1,NODECOST1,INITIALCOST1,WAYTAGS1,NODETAGS1]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [LONGITUDE1,LATITUDE1,ELEVATION1,DISTANCE1,COSTPERKM1,ELEVCOST1,TURNCOST1,NODECOST1,INITIALCOST1,WAYTAGS1,NODETAGS1]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [Longitude1,Latitude1,Elevation1,Distance1,CostPerKm1,ElevCost1,TurnCost1,NodeCost1,InitialCost1,WayTags1,NodeTags1]
%   = importfile('brouter.csv',2, 227);
%
%    See also TEXTSCAN.
%
% Auto-generated by MATLAB on 2018/06/26 17:30:51
%%
filename = 'brouter.csv';
fichier_cible = 'C:\Users\Mégane Lavallée\Documents\Éclipse\Stratégie\StrategieCourse\Data\ASC2018_Stage1_speed.mat';

%% Initialize variables.
delimiter = '\t';
startRow = 2;
endRow = inf;


%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9]);
rawCellColumns = raw(:, [10,11]);


%% Allocate imported array to column variable names
speedParcours.longitude = cell2mat(rawNumericColumns(:, 1));
speedParcours.latitude = cell2mat(rawNumericColumns(:, 2));
speedParcours.waytags = rawCellColumns(:, 1);


save(fichier_cible, 'speedParcours')

clear all, clc